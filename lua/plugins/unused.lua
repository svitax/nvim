-- stylua: ignore
if true then return {} end

-- <A-o> and <A-i> to jump to previous and next buffer on jumplist (mirrors <C-o> and <C-i>.)
-- {
--   "cbochs/portal.nvim",
--   opts = {
--     labels = { "j", "k", "l", ";" },
--     escape = { ["<esc>"] = true, ["q"] = true },
--     portal = {
--       title = { render_empty = false, options = { relative = "editor", width = 60 } },
--       body = { options = { relative = "editor", width = 60 } },
--     },
--   },
--   keys = {
--     {
--       "<A-o>",
--       function()
--         local query = require("portal.query").resolve({ "different" })
--         local jumps = require("portal.jump").search(query, "backward")
--         require("portal.jump").select(jumps[1])
--       end,
--       desc = "Jump previous buffer",
--     },
--     {
--       "<A-i>",
--       function()
--         local query = require("portal.query").resolve({ "different" })
--         local jumps = require("portal.jump").search(query, "forward")
--         require("portal.jump").select(jumps[1])
--       end,
--       desc = "Jump next buffer",
--     },
--     {
--       "<C-o>",
--       function()
--         require("portal").jump_backward({ query = { "valid", "valid", "valid" } })
--       end,
--     },
--     {
--       "<C-i>",
--       function()
--         require("portal").jump_forward({ query = { "valid", "valid", "valid" } })
--       end,
--     },
--   },
-- },
--
-- {
--   -- TODO: replace printer.nvim with refactoring.nvim functionality
--   "rareitems/printer.nvim",
--   opts = {
--     keymap = "gp",
--     formatters = {
--       javascriptreact = function(text_inside, text_var)
--         return string.format('console.log("%s = ", %s)', text_inside, text_var)
--       end,
--       typescriptreact = function(text_inside, text_var)
--         return string.format('console.log("%s = ", %s)', text_inside, text_var)
--       end,
--     },
--     -- TODO: the filepath in the default add_to_inside will look better if I use vim-rooter
--     -- add_to_inside = function(text)
--     --   return string.format("[%s:%s] %s", vim.fn.expand("%"), vim.fn.line("."), text)
--     -- end,
--   },
--   keys = { { "gp", desc = "Debug printing operator" } },
-- },
--
-- <A-n> and <A-p> to cycle through yank history (like Emacs 'kill-ring.')
-- {
--   "gbprod/yanky.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function(_, opts)
--     require("yanky").setup(opts)
--     require("telescope").load_extension("yank_history")
--   end,
--   opts = { highlight = { timer = 150 } },
--   keys = {
--     { "p", "<Plug>(YankyPutAfter)", desc = "Put after" },
--     { "P", "<Plug>(YankyPutBefore)", desc = "Put before" },
--     -- { "gp", "<Plug>(YankyGPutAfter)", desc = "gput after" },
--     -- { "gP", "<Plug>(YankyGPutBefore)", desc = "gput before" },
--     { "<A-n>", "<Plug>(YankyCycleForward)", desc = "Cycle kill ring forward" },
--     { "<A-p>", "<Plug>(YankyCycleBackward)", desc = "Cycle kill ring backward" },
--     { "<leader>sy", "<cmd>Telescope yank_history<cr>", desc = "Yank history" },
--   },
-- },
-- {
--   "Wansmer/binary-swap.nvim",
--   dependencies = { "nvim-treesitter" },
--   keys = {
--     {
--       "<A-.>",
--       "<cmd>lua require('binary-swap').swap_operands()<cr>",
--       mode = { "n", "i" },
--       desc = "Swap operands",
--     },
--     {
--       "<A-,>",
--       "<cmd>lua require('binary-swap').swap_operands_with_operator()<cr>",
--       mode = { "n", "i" },
--       desc = "Swap operands and operator",
--     },
--   },
-- },
--
-- {
--   "Olical/conjure",
--   config = function()
--     vim.g["conjure#mapping#prefix"] = "<leader>m"
--   end,
--   lazy = true,
-- },
--
-- {
--   -- TODO: replace nvim-genghis with nvim-dired
--   "chrisgrieser/nvim-genghis",
--   dependencies = { "stevearc/dressing.nvim", "hrsh7th/nvim-cmp", "hrsh7th/cmp-omni" },
--   config = function(_, opts)
--     local cmp = require("cmp")
--     cmp.setup.filetype("DressingInput", {
--       sources = cmp.config.sources({ { name = "omni" } }),
--     })
--   end,
--   keys = {
--     { "<leader>fC", "<cmd>lua require('genghis').duplicateFile()<cr>", desc = "Copy this file" }, -- genghis duplicate
--     {
--       "<leader>fD",
--       -- "<cmd>lua require('genghis').trashFile({trashLocation = '$HOME/.local/share/Trash'})<cr>",
--       function()
--         require("genghis").trashFile({ trashLocation = "$HOME/.local/share/Trash" })
--       end,
--       desc = "Delete this file (trash)",
--     },
--     { "<leader>fN", "<cmd>lua require('genghis').createNewFile()<cr>", desc = "New file" },
--     { "<leader>fR", "<cmd>lua require('genghis').moveAndRenameFile()<cr>", desc = "Rename/move file" },
--     -- { "<leader>fS", desc = "Save file as..." }, write file ...
--     { "<leader>fX", "<cmd>lua require('genghis').chmodx()<cr>", desc = "Make file executable" },
--     { "<leader>fy", "<cmd>lua require('genghis').copyFilepath()<cr>", desc = "Yank file path" },
--     { "<leader>fY", "<cmd>lua require('genghis').copyFilename()<cr>", desc = "Yank file name" },
--     -- { "<leader>cR", "<cmd>lua require('genghis').renameFile()<cr>", desc = "Rename file" },
--   },
-- },
-- { "ellisonleao/dotenv.nvim", opts = { enable_on_load = true, verbose = true } },
-- {"LinArcX/telescope-env.nvim"}
-- {
--   "stevearc/oil.nvim",
--   opts = {
--     keymaps = { ["q"] = "actions.close", ["."] = "actions.toggle_hidden", ["="] = "actions.select" },
--     view_options = { show_hidden = true },
--     float = {
--       max_width = math.floor(vim.opt.columns:get() * 0.75),
--       max_height = math.floor(vim.opt.lines:get() * 0.75),
--     },
--   },
--   keys = { { "<leader>E", "<cmd>Oil --float<cr>", desc = "Files" } },
-- },
-- {
--   "SidOfc/carbon.nvim",
--   lazy = false,
--   init = function()
--     vim.g.carbon_lazy_init = true
--   end,
--   opts = {
--     auto_open = false,
--     indicators = { expand = "", collapse = "" },
--     actions = {
--       up = "l",
--       down = ";",
--       quit = "q",
--       edit = "<cr>",
--       move = "m",
--       reset = "u",
--       split = { "<c-x>", "<c-s>" },
--       vsplit = "<c-v>",
--       create = { "c" },
--       delete = "d",
--       close_parent = "-",
--     },
--     float_settings = function()
--       local columns = vim.opt.columns:get()
--       local rows = vim.opt.lines:get()
--       local width = math.floor(columns * 0.75)
--       local height = math.floor(rows * 0.75)
--
--       return {
--         relative = "editor",
--         style = "minimal",
--         border = "single",
--         width = width,
--         height = height,
--         col = math.floor(columns / 2 - width / 2),
--         row = math.floor(rows / 2 - height / 2 - 2),
--       }
--     end,
--   },
--   keys = { { "<leader>E", "<cmd>Fcarbon!<cr>", desc = "Carbon" } },
-- },
-- {
--   "is0n/tui-nvim",
--   config = function(_, opts)
--     function Lf()
--       require("tui-nvim"):new({
--         cmd = "lf " .. vim.fn.fnameescape(vim.fn.expand("%:p")),
--         temp = "/tmp/tui-nvim",
--         method = "float",
--       })
--     end
--     function Lazygit()
--       require("tui-nvim"):new({
--         cmd = "lazygit -w " .. vim.fn.fnameescape(vim.fn.expand("%:p:h")),
--       })
--     end
--     vim.cmd([[command! Lazygit :lua Lazygit()<cr>]])
--     vim.cmd([[command! Lf :lua Lf()<cr>]])
--   end,
--   keys = { { "<leader>e", "<cmd>Lf<cr>", desc = "Files" }, { "<leader>gt", "<cmd>Lazygit<cr>", desc = "Lazygit" } },
-- },
--
-- {
--   "sodapopcan/vim-twiggy",
--   dependencies = { "tpope/vim-fugitive" },
--   cmd = "Twiggy",
--   config = function()
--     vim.cmd([[let g:twiggy_close_on_fugitive_command = 1]])
--   end,
--   keys = { { "<leader>gt", "<cmd>Twiggy<cr>", desc = "Git branches" } },
-- },
-- {
--   "rbong/vim-flog",
--   dependencies = { "tpope/vim-fugitive" },
--   cmd = { "Flog", "Flogsplit" },
--   keys = { { "<leader>gl", "<cmd>Flogsplit<cr>", desc = "Git log" } },
-- },
-- {
--   "tpope/vim-fugitive",
--   cmd = { "G", "Git" },
--   -- cc (create a commit)
--   -- ca (amend last commit)
--   -- cw (reword last commit)
--   -- cf (create a fixup! commit for the commit under cursor)
--   -- cF (create fixup! and immediately rebase it)
--   -- cs (create a squash! commit for the commit under cursor)
--   -- cS (create squash! and immediately rebase it)
--   -- crc (revert commit under cursor)
--   -- coo (checkout commit under cursor)
--   -- czz (push stash)
--   -- cza (apply topmost stash)
--   -- czp (pop topmost stash)
--   -- ri (interactive rebase)
--   -- rf (autosquash rebase)
--   -- ru (interactive rebase against upstream)
--   -- rp (interactive rebase against push)
--   -- rr (continue rebase)
--   -- rs (skip current commit and continue rebase)
--   -- re (edit current rebase todo list)
--   -- rw (rebase commit under word set to reword)
--   -- rm (rebase commit under word set to edit)
--   -- rd (rebase commit under word set to drop)
--   -- gq (close status buffer)
--   keys = {
--     {
--       "<leader>gg",
--       function()
--         local utils = require("utils")
--         vim.cmd([[tab Git]])
--         vim.cmd([[Twiggy]])
--         vim.api.nvim_feedkeys(utils.termcodes("<c-l>"), "i", true)
--         -- "<cmd>Git<cr><cmd>Twiggy<cr><cmd>G<cr>"
--       end,
--       desc = "Fugitive",
--     },
--   },
-- },
-- {
--   "TimUntersberger/neogit",
--   dependencies = { "nvim-lua/plenary.nvim" },
--   cmd = "Neogit",
--   -- opts = { kind = "replace" },
--   keys = {
--     {
--       "<leader>gg",
--       function()
--         return require("neogit").open({ cwd = vim.fn.expand("%:p:h") })
--       end,
--       desc = "Neogit",
--     },
--   },
-- },
--
-- {
--   -- TODO: preview doesn't work and won't override lazyvim <leader>ca for some reason
--   "aznhe21/actions-preview.nvim",
--   opts = {
--     diff = {
--       algorithm = "patience",
--       ignore_whitespace = true,
--     },
--     telescope = require("telescope.themes").get_ivy(),
--   },
--   keys = { { "<leader>ca", ":lua require('actions-preview').code_actions()<cr>", desc = "Lol" } },
-- },
--
-- { "chrishrb/gx.nvim", keys = { { "gx" } }, config = true },
--
-- {
--   -- TODO: don't need goto actions
--   "drybalka/tree-climber.nvim",
--   dependencies = { "nvim-treesitter" },
--   keys = {
--     {
--       "<A-l>",
--       "<cmd>lua require('tree-climber').goto_parent()<cr>",
--       -- mode = { "i", "n" },
--       desc = "Jump to parent node",
--     },
--     {
--       "<A-;>",
--       "<cmd>lua require('tree-climber').goto_child()<cr>",
--       -- mode = { "n", "i" },
--       desc = "Jump to child node",
--     },
--     {
--       "<A-j>",
--       "<cmd>lua require('tree-climber').goto_next()<cr>",
--       -- mode = { "i", "n" },
--       desc = "Jump to next node",
--     },
--     {
--       "<A-k>",
--       "<cmd>lua require('tree-climber').goto_prev()<cr>",
--       -- mode = { "i", "n" },
--       desc = "Jump to prev node",
--     },
--     {
--       "<A-J>",
--       "<cmd>lua require('tree-climber').swap_next()<cr>",
--       -- mode = { "n", "i" },
--       desc = "Swap with next node",
--     },
--     {
--       "<A-K>",
--       "<cmd>lua require('tree-climber').swap_prev()<cr>",
--       -- mode = { "n", "i" },
--       desc = "Swap with prev node",
--     },
--   },
-- },
--
-- TODO: replace nvim-femaco with otter.nvim
-- { "AckslD/nvim-FeMaco.lua", config = true, keys = { { "<leader>ne", "<cmd>FeMaco<cr>", desc = "Edit codeblock" } } },
--
-- TODO: mind.nvim is deprecated
-- {
--   "phaazon/mind.nvim",
--   opts = { ui = { width = 40 } },
--   keys = { { "<leader>nt", "<cmd>MindOpenMain<cr>", desc = "Todos (mind)" } },
-- },
--
-- TODO: add glow.nvim when it has support for live split preview
-- https://github.com/ellisonleao/glow.nvim/discussions/78
-- {"ellisonleao/glow.nvim", config = true, cmd = "Glow"}
-- TODO: lyaml as a rocks dependency (not supported by lazy.nvim)
-- {
--   "jghauser/papis.nvim",
--   dependencies = { "kkharji/sqlite.lua" },
--   cmd = "PapisStart",
--   opts = { enable_keymaps = false },
--   config = function(_, opts)
--     require("papis").setup(opts)
--     require("telescope").load_extension("papis")
--   end,
--   keys = {
--     { "<leader>np", "<cmd>Telescope papis<cr>", desc = "Bibliography (papis)" },
--   },
-- },
-- {
--   "bennypowers/nvim-regexplainer",
--   cmd = { "RegexplainerShowSplit", "RegexplainerShowPopup", "RegexplainerToggle" },
--   opts = { mappings = { toggle = false } },
--   keys = {
--     {
--       "<leader>nE",
--       function()
--         return require("regexplainer").toggle({ display = "popup" })
--       end,
--       desc = "Regexplainer",
--     },
--   },
-- },
-- {
--   "nvim-treesitter/nvim-treesitter",
--   opts = function(_, opts)
--     if type(opts.ensure_installed) == "table" then
--       vim.list_extend(opts.ensure_installed, { "regex" })
--     end
--   end,
-- },
-- { "lukas-reineke/headlines.nvim", ft = { "markdown" }, config = true },
--
-- {
--   -- TODO: replace mini.surround with nvim-surround
--   -- add/delete/change surroundings with ys{motion}{char}, ds{char}, and cs{target}{replacement}
--   "echasnovski/mini.surround",
--   keys = function(plugin, keys)
--     -- Populate the keys based on the user's options
--     local opts = require("lazy.core.plugin").values(plugin, "opts", false)
--     local mappings = {
--       { opts.mappings.add, desc = "Add surrounding", mode = { "n", "v" } },
--       { opts.mappings.delete, desc = "Delete surrounding" },
--       { opts.mappings.find, desc = "Find right surrounding" },
--       { opts.mappings.find_left, desc = "Find left surrounding" },
--       { opts.mappings.highlight, desc = "Highlight surrounding" },
--       { opts.mappings.replace, desc = "Replace surrounding" },
--       { opts.mappings.update_n_lines, desc = "Update `MiniSurround.config.n_lines`" },
--     }
--     return vim.list_extend(mappings, keys, 1, #mappings)
--   end,
--   opts = {
--     mappings = {
--       add = "ys", -- Add surrounding in Normal and Visual modes
--       delete = "ds", -- Delete surrounding
--       highlight = "hs", -- Highlight surrounding
--       replace = "cs", -- Replace surrounding
--       -- find = "gzf", -- Find surrounding (to the right)
--       -- find_left = "gzF", -- Find surrounding (to the left)
--       -- update_n_lines = "gzn", -- Update `n_lines`
--     },
--     search_method = "cover_or_next",
--   },
-- },
--{
--   "nvim-treesitter/nvim-treesitter",
--   dependencies = {
--     -- Better treesitter indents
--     -- "yioneko/nvim-yati",
--     opts = {
--       -- yati = {
--       --   enable = true,
--       --   default_lazy = true,
--       --   default_fallback = function(lnum, computed, bufnr)
--       --     local tm_fts = {
--       --       "c",
--       --       "cpp",
--       --       "lua",
--       --       "python",
--       --       "html",
--       --       "json",
--       --       "css",
--       --       "less",
--       --       "scss",
--       --       "javascript",
--       --       "typescript",
--       --       "javascriptreact",
--       --       "typescriptreact",
--       --       "rust",
--       --       "yaml",
--       --       "gitcommit",
--       --       "gitignore",
--       --     }
--       --     if vim.tbl_contains(tm_fts, vim.bo[bufnr].filetype) then
--       --       return require("tmindent").get_indent(lnum, bufnr) + computed
--       --     end
--       --     -- or any other fallback methods
--       --     return require("nvim-yati.fallback").vim_auto(lnum, computed, bufnr)
--       --   end,
--       -- },
--     },
--   },
-- },
--
-- {
--   "nanozuki/tabby.nvim",
--   event = "VeryLazy",
--   keys = {
--     { "<leader><tab>d", "<cmd>tabclose<cr>", desc = "Delete tab" },
--     { "<leader><tab>N", "<cmd>$tabnew<cr>", desc = "New tab" },
--     { "<leader><tab>n", "<cmd>tabnext<cr>", desc = "Next tab" },
--     { "<leader><tab>p", "<cmd>tabprevious<cr>", desc = "Previous tab" },
--     { "<leader><tab>:", "<cmd>+tabmove<cr>", desc = "Move tab right" },
--     { "<leader><tab>L", "<cmd>-tabmove<cr>", desc = "Move tab left" },
--     { "<leader><tab>r", ":TabRename ", desc = "Rename tab" },
--     { "<C-n>", "<cmd>tabnext<cr>", desc = "Next tab" },
--     { "<C-p>", "<cmd>tabprevious<cr>", desc = "Previous tab" },
--   },
--   config = function()
--     vim.o.showtabline = 2
--
--     local function tab_name(tab)
--       return string.gsub(tab, "%[..%]", "")
--     end
--
--     local theme = {
--       fill = "TabLineFill",
--       -- Also you can do this:
--       -- fill = { fg = "#f2e9de", bg = "#0c0c0c" },
--       head = "TabLine",
--       current_tab = "TabLineSel",
--       -- current_tab = { fg = "#F8FBF6", bg = "#896a98" },
--       tab = "TabLine",
--       win = "TabLine",
--       tail = "TabLine",
--     }
--
--     require("tabby.tabline").set(function(line)
--       return {
--         {
--           { "  ", hl = theme.head },
--           line.sep("", theme.head, theme.fill),
--         },
--         line.tabs().foreach(function(tab)
--           local hl = tab.is_current() and theme.current_tab or theme.tab
--           return {
--             line.sep("", hl, theme.fill),
--             -- tab.number(),
--             -- "",
--             tab_name(tab.name()),
--             -- "",
--             line.sep("", hl, theme.fill),
--             hl = hl,
--             margin = " ",
--           }
--         end),
--         line.spacer(),
--         -- line.wins_in_tab(line.api.get_current_tab()).foreach(function(win)
--         --   local hl = win.is_current() and theme.current_tab or theme.tab
--         --   return {
--         --     line.sep("", hl, theme.fill),
--         --     win.file_icon(),
--         --     " ",
--         --     win.buf_name(),
--         --     " ",
--         --     -- win.buf().id,
--         --     line.sep("", hl, theme.fill),
--         --     hl = hl,
--         --     margin = " ",
--         --   }
--         -- end),
--         {
--           line.sep("", theme.tail, theme.fill),
--           { "  ", hl = theme.tail },
--         },
--         hl = theme.fill,
--       }
--     end)
--   end,
-- },
-- -- { "tiagovla/scope.nvim", event = "VeryLazy", config = true },
-- {
--   "LukasPietzschmann/telescope-tabs",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   keys = { { "<leader><tab><tab>", "<cmd>Telescope telescope-tabs list_tabs<cr>", desc = "Switch tab" } },
-- },
--
-- BUG: my cwd gets stuck whenever I look at a file in my .config/nvim, and none of these autoroot plugins fix it
-- {
--   "notjedi/nvim-rooter.lua",
--   lazy = false,
--   config = function(_, opts)
--     require("nvim-rooter").setup(opts)
--     vim.cmd([[RooterToggle]])
--   end,
-- },
--
-- {
--   "airblade/vim-rooter",
--   init = function()
--     vim.g["rooter_cd_cmd"] = "lcd"
--   end,
--   cmd = { "Rooter" },
-- },
-- {
--   "samjwill/nvim-unception",
--   init = function()
--     vim.g.unception_open_buffer_in_new_tab = true
--   end,
--   config = function()
--     vim.api.nvim_create_autocmd("User", {
--       group = vim.api.nvim_create_augroup("UnceptionGroup", { clear = true }),
--       pattern = "UnceptionEditRequestReceived",
--       callback = function()
--         local ok, _ = pcall(require, "toggleterm")
--         if ok then
--           vim.cmd("ToggleTerm")
--         end
--       end,
--     })
--   end,
-- },
--
-- { "ldelossa/buffertag", event = "BufReadPost", opts = {} },
--
-- {
--   "Lilja/zellij.nvim",
--   event = "VeryLazy",
--   opts = {
--     replaceVimWindowNavigationKeybinds = false, -- Will set keybinds like <C-w>h to left
--     vimTmuxNavigatorKeybinds = true, -- Will set keybinds like <C-h> to left
--     debug = true,
--   },
-- },
-- {
--   "willothy/wezterm.nvim",
--   config = true,
--   keys = {
--     { "<C-l>", "<cmd>lua require('wezterm').switch_pane.direction('Left')<cr>", desc = "Switch pane left" },
--     { "<C-j>", "<cmd>lua require('wezterm').switch_pane.direction('Down')<cr>", desc = "Switch pane down" },
--     { "<C-k>", "<cmd>lua require('wezterm').switch_pane.direction('Up')<cr>", desc = "Switch pane up" },
--     { "<C-;>", "<cmd>lua require('wezterm').switch_pane.direction('Right')<cr>", desc = "Switch pane right" },
--
--     { "<leader>wV", "<cmd>lua require('wezterm').split_pane.vertical()<cr>", desc = "Vsplit pane" },
--     { "<leader>wS", "<cmd>lua require('wezterm').split_pane.horizontal()<cr>", desc = "Split pane" },
--
--     { "<leader>wn", "<cmd>lua require('wezterm').switch_tab.relative(1)<cr>", desc = "Next tab" },
--     { "<leader>wp", "<cmd>lua require('wezterm').switch_tab.relative(-1)<cr>", desc = "Previous tab" },
--   },
-- },
--
-- { "prochri/telescope-all-recent.nvim", dependencies = { "kkharji/sqlite.lua" }, opts = {}, cmd = "Telescope" },
-- {
--   "nvim-telescope/telescope-file-browser.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function()
--     require("telescope").load_extension("file_browser")
--   end,
--   keys = {
--     -- TODO: find directory
--     { "<leader>fd", "<cmd>Telescope file_browser<cr>", desc = "Find directory" }, -- Search for directories, on <cr> open dirvish/dired
--     {
--       "<leader>fE",
--       function()
--         require("telescope").extensions.file_browser.file_browser({
--           cwd = "~/.config/nvim",
--           cwd_to_path = true,
--         })
--       end,
--       desc = "Browse .config/nvim",
--     },
--   },
-- },
-- {
--   "princejoogie/dir-telescope.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function()
--     require("telescope").load_extension("dir")
--   end,
--   -- TODO: make dir-telescope not search .git and node_modules folders
--   -- choose a dir to grep in
--   keys = { { "<leader>sD", "<cmd>Telescope dir live_grep<cr>", desc = "Search other directory" } },
-- },
-- {
--   "marcuscaisey/olddirs.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function()
--     require("telescope").load_extension("olddirs")
--   end,
--   keys = { { "<leader>fo", "<cmd>Telescope olddirs picker<cr>", desc = "Recent dirs" } },
-- },
-- {
--   "zane-/howdoi.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function()
--     require("telescope").load_extension("howdoi")
--   end,
--   keys = {
--     -- NOTE: telescope-howdoi previewer shows no colors
--     { "<leader>hd", "<cmd>Telescope howdoi<cr>", desc = "Howdoi" },
--   },
-- },
-- TODO: delete browse.nvim and use something like rofi instead
-- {
--   "lalitmee/browse.nvim",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   cmd = { "Browse", "BrowseBookmarks", "BrowseInputSearch", "BrowseDevdocsSearch", "BrowseDevdocsFiletypeSearch" },
--   opts = {
--     bookmarks = {
--       ["npm-search"] = "https://npmjs.com/search?q=%s",
--       ["github-code-search"] = "https://github.com/search?q=%s&type=code",
--       ["github-repo-search"] = "https://github.com/search?q=%s&type=repositories",
--       ["github-issues-search"] = "https://github.com/search?q=%s&type=issues",
--       ["github-pulls-search"] = "https://github.com/search?q=%s&type=pullrequests",
--     },
--   },
--   keys = {
--     { "<leader>soo", "<cmd>lua require('browse').input_search()<cr>", desc = "Look up online" },
--     { "<leader>sob", "<cmd>lua require('browse').open_bookmarks()<cr>", desc = "Bookmarks" },
--     { "<leader>sos", "<cmd>lua require('browse').browse()<cr>", desc = "Browse" },
--     { "<leader>sod", "<cmd>lua require('browse.devdocs').search()<cr>", desc = "Devdocs" },
--     {
--       "<leader>sof",
--       "<cmd>lua require('browse.devdocs').search_with_filetype()<cr>",
--       desc = "Devdocs with filetype",
--     },
--   },
-- },
-- {
--   "sopa0/telescope-makefile",
--   dependencies = { "nvim-telescope/telescope.nvim" },
--   config = function()
--     require("telescope").load_extension("make")
--   end,
--   keys = { { "<leader>cM", "<cmd>Telescope make<cr>", desc = "Make" } },
-- },
--{
--   "mzlogin/vim-markdown-toc",
--   cmd = { "GenTocGFM", "GenTocRedcarpet", "GenTocGitLab", "UpdateToc" },
--   ft = "markdown",
--   init = function()
--     vim.g.vmt_auto_update_on_save = 0
--   end,
--   keys = {
--     { "<leader>nt", "<cmd>GenTocGFM<cr>", desc = "Generate TOC" },
--     { "<leader>nT", "<cmd>UpdateToc<cr>", desc = "Update TOC" },
--   },
-- },
